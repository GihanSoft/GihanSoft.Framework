    partial struct PLACEHOLDERID :
        global::System.IFormattable, global::System.ISpanFormattable, global::System.IUtf8SpanFormattable
    {
        /// <inheritdoc cref="global::System.IFormattable"/>
        public string ToString(
            [global::System.Diagnostics.CodeAnalysis.StringSyntax(global::System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat)]
            string? format,
            global::System.IFormatProvider? formatProvider)
            => Value.ToString(format, formatProvider);

        /// <inheritdoc cref="global::System.ISpanFormattable"/>
        public bool TryFormat(
            global::System.Span<char> destination,
            out int charsWritten,
            [global::System.Diagnostics.CodeAnalysis.StringSyntax(global::System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat)]
            global::System.ReadOnlySpan<char> format,
            global::System.IFormatProvider? provider)
            => Value.TryFormat(destination, out charsWritten, format);

        /// <inheritdoc cref="global::System.ISpanFormattable"/>
        public bool TryFormat(
            global::System.Span<char> destination,
            out int charsWritten,
            [global::System.Diagnostics.CodeAnalysis.StringSyntax(global::System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat)]
            global::System.ReadOnlySpan<char> format = default)
            => Value.TryFormat(destination, out charsWritten, format);

        /// <inheritdoc cref="global::System.IUtf8SpanFormattable.TryFormat" />
        public bool TryFormat(
            global::System.Span<byte> utf8Destination,
            out int bytesWritten,
            [global::System.Diagnostics.CodeAnalysis.StringSyntax(global::System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat)]
            global::System.ReadOnlySpan<char> format = default,
            global::System.IFormatProvider? provider = null)
            => Value.TryFormat(utf8Destination, out bytesWritten, format, provider);
    }
